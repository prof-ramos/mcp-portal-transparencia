# Task ID: 5
# Title: Implement Error Handling System
# Status: cancelled
# Dependencies: 1, 3
# Priority: high
# Description: Create a comprehensive error handling system that categorizes API errors, provides meaningful messages, and handles rate limiting errors specifically.
# Details:
1. Create custom error classes in `src/errors/api-errors.ts`:
```typescript
export class ApiError extends Error {
  statusCode: number;
  endpoint: string;
  requestPayload?: any;
  responseBody?: any;

  constructor(message: string, statusCode: number, endpoint: string, requestPayload?: any, responseBody?: any) {
    super(message);
    this.name = 'ApiError';
    this.statusCode = statusCode;
    this.endpoint = endpoint;
    this.requestPayload = requestPayload;
    this.responseBody = responseBody;
  }

  isClientError(): boolean {
    return this.statusCode >= 400 && this.statusCode < 500;
  }

  isServerError(): boolean {
    return this.statusCode >= 500;
  }
}

export class RateLimitError extends ApiError {
  retryAfter?: number;
  currentLimit: number;
  
  constructor(message: string, endpoint: string, currentLimit: number, retryAfter?: number) {
    super(message, 429, endpoint);
    this.name = 'RateLimitError';
    this.currentLimit = currentLimit;
    this.retryAfter = retryAfter;
  }
}

export class AuthenticationError extends ApiError {
  constructor(message: string, endpoint: string) {
    super(message, 401, endpoint);
    this.name = 'AuthenticationError';
  }
}

export class NotFoundError extends ApiError {
  constructor(message: string, endpoint: string) {
    super(message, 404, endpoint);
    this.name = 'NotFoundError';
  }
}
```
2. Create an ErrorHandler class in `src/errors/error-handler.ts`:
```typescript
import { Logger } from '../logging/logger';
import { ApiError, RateLimitError, AuthenticationError, NotFoundError } from './api-errors';

export class ErrorHandler {
  private logger: Logger;

  constructor(logger: Logger) {
    this.logger = logger;
  }

  handleApiError(error: any, endpoint: string, requestPayload?: any): Error {
    if (error.response) {
      const { status, data } = error.response;
      
      // Handle rate limiting errors
      if (status === 429) {
        const retryAfter = parseInt(error.response.headers['retry-after'] || '60', 10);
        const message = 'Rate limit exceeded for Portal da Transparência API';
        const rateLimitError = new RateLimitError(message, endpoint, 90, retryAfter);
        
        this.logger.warn(message, {
          endpoint,
          status,
          retryAfter,
          responseData: data
        });
        
        return rateLimitError;
      }
      
      // Handle authentication errors
      if (status === 401) {
        const message = 'Authentication failed for Portal da Transparência API';
        this.logger.error(message, { endpoint, status });
        return new AuthenticationError(message, endpoint);
      }
      
      // Handle not found errors
      if (status === 404) {
        const message = 'Resource not found in Portal da Transparência API';
        this.logger.error(message, { endpoint, status });
        return new NotFoundError(message, endpoint);
      }
      
      // Generic API error
      const message = `API error: ${data?.message || 'Unknown error'}`;
      this.logger.error(message, {
        endpoint,
        status,
        requestPayload,
        responseData: data
      });
      
      return new ApiError(message, status, endpoint, requestPayload, data);
    }
    
    // Network or other errors
    const message = `Request failed: ${error.message}`;
    this.logger.error(message, { endpoint, error: error.message });
    return new Error(message);
  }

  isRateLimitError(error: any): error is RateLimitError {
    return error instanceof RateLimitError;
  }
}
```
3. Implement rate limit detection from error messages
4. Add retry logic for transient errors
5. Create user-friendly error messages for common error scenarios

# Test Strategy:
1. Unit tests:
   - Test error classification
   - Test rate limit detection
   - Test error message formatting
   - Test retry logic
2. Integration tests:
   - Test with actual API errors
   - Verify rate limit detection works with real API responses
   - Test error handling in full request flow
